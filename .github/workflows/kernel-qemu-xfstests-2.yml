name: xfstests workflow

on:
  workflow_dispatch:
  push:
      branches:
        - 'kernelci-*'

permissions:
  contents: read
  checks: write
  id-token: write
  pull-requests: write


jobs:
  check_changes:
    runs-on: ubuntu-latest
    outputs:
      in_ext2: ${{ steps.check_paths.outputs.in_ext2 }}
      in_ext4: ${{ steps.check_paths.outputs.in_ext4 }}
      in_xfs: ${{ steps.check_paths.outputs.in_xfs }}
      in_btrfs: ${{ steps.check_paths.outputs.in_btrfs }}
      fs_generic: ${{ steps.set_fs_generic.outputs.fs_generic }}
    steps:
      - uses: actions/checkout@v2
      - uses: dorny/paths-filter@v2
        id: check_paths
        with:
          filters: |
            in_ext2:
              - 'fs/ext2/**'
            in_ext4:
              - 'fs/ext4/**'
            in_xfs:
              - 'fs/xfs/**'
            in_btrfs:
              - 'fs/btrfs/**'
            in_fs:
              - 'fs/**'
            in_include:
              - 'include/linux/fs.h'
      - name: Set fs_generic flag
        id: set_fs_generic
        run: |
          if [[ ("${{ steps.check_paths.outputs.in_include }}" == "true" || ("${{ steps.check_paths.outputs.in_fs }}" == "true") && "${{ steps.check_paths.outputs.in_ext2 }}" != "true" && "${{ steps.check_paths.outputs.in_ext4 }}" != "true" && "${{ steps.check_paths.outputs.in_xfs }}" != "true" && "${{ steps.check_paths.outputs.in_btrfs }}" != "true") ]]; then
            echo "fs_generic=true" >> $GITHUB_ENV
            echo "::set-output name=fs_generic::true"
          else
            echo "fs_generic=false" >> $GITHUB_ENV
            echo "::set-output name=fs_generic::false"
          fi
  build_kernel:
    needs: check_changes
    if: ${{ needs.check_changes.outputs.fs_generic == 'true' || needs.check_changes.outputs.in_ext2 == 'true' || needs.check_changes.outputs.in_ext4 == 'true' || needs.check_changes.outputs.in_xfs == 'true' ||  needs.check_changes.outputs.in_btrfs == 'true' }}
    runs-on: ubuntu-latest
    steps:
    - name: Check out repository
      uses: actions/checkout@v3
    - name: Install dependencies
      run: |
        sudo apt-get update && sudo apt-get install -y gcc
        sudo apt-get install -y build-essential libncurses-dev bison flex libssl-dev bc libelf-dev fakeroot dkms
    - name: Compile Linux
      #continue-on-error: true
      run: |
        make defconfig
        make -j$(nproc) Werror=1
    - name: Set up Python 3.x
      uses: actions/setup-python@v3
      with:
        python-version: '3.x'
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: kernel_artifacts
        path: |
          arch/x86/boot/bzImage
          arch/x86/boot/.config
          System.map
          vmlinux
  ext2_tests:
    needs: build_kernel
    if: ${{ needs.check_changes.outputs.in_ext2 == 'true' || needs.check_changes.outputs.fs_generic == 'true' }}
    runs-on: self-hosted
    strategy:
      matrix:
        config: ["ext2_1k", "ext2_4k"]
    steps:
        # ensure you start clean
      - name: Clean up github workspace
        run: |
          cd $GITHUB_WORKSPACE
          rm -rf *
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          repository: riteshharjani/github-actions
          ref: master
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: kernel_artifacts
      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y \
          gcc \
          python3 python3-pip \
          qemu-system-x86 \
          qemu-utils cloud-image-utils gzip
      - name: Set up Python 3.x
        uses: actions/setup-python@v3
        with:
          python-version: '3.x'
      - name: Install pip packages
        run: |
          sudo pip3 install pexpect
          sudo pip3 install gdown
      - name: Cloud-init image
        run: |
          sudo cloud-localds user-data.img user-data.yaml
      - name: Create dummy qcow image
        run: |
          qemu-img create -f qcow2 jammy-server-cloudimg-amd64.img 20G
      # Download from self hosted
#      - name: Download Ubuntu cloud image
#        run: |
#          sudo gdown https://drive.google.com/uc?id=1KtYJxM_Z5sio1mIPEe-szS3IGu56VyML
#          gzip -d jammy-server-cloudimg-amd64.img.gz
#          sudo qemu-img resize jammy-server-cloudimg-amd64.img +20G
      - name: Cleanup results directory
        continue-on-error: true
        run: |
          rm -rf /tmp/results/
          mkdir /tmp/results
      - name: Run ${{ github.job }} tests with config ${{ matrix.config }}
        run: |
          echo "Running ${{ github.job }} tests with config ${{ matrix.config }}"
          echo $GITHUB_WORKSPACE
          lscpu
          lsmem
          pwd
          ls
          mount
          df -h
          cat tests/run_qemu_xfstests.py
          sudo python3 tests/run_qemu_xfstests.py "fs/xfstests.py.data/${{ matrix.config }}.yaml"
          sudo chown -R $USER:$USER /tmp/results
          sudo ls -al /tmp/results/
      - name: Upload test results for "${{ github.job }}-${{ matrix.config }}"
        uses: actions/upload-artifact@v3
        with:
          name: xfstests_artifacts_${{ github.job }}_${{ matrix.config }}
          path: /tmp/results/
      - name: Publish results for "${{ github.job }}-${{ matrix.config }}"
        continue-on-error: true
        uses: mikepenz/action-junit-report@v3
        if: always()
        with:
          commit: ${{ github.sha }}
          detailed_summary: true
          annotate_notice: true
          include_passed: true
          report_paths: '/tmp/results/job*/results*/*.xml'
          github_token: ${{ secrets.GITHUB_TOKEN }}
      # ensure you cleanup everything after every run but only from within
      # $GITHUB_WORKSPACE ;)
      - name: Clean up current directory
        run: |
          cd $GITHUB_WORKSPACE
          rm -rf *

  ext4_tests:
    needs: build_kernel
    if: ${{ needs.check_changes.outputs.in_ext4 == 'true' || needs.check_changes.outputs.fs_generic == 'true' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        config: ["ext4_4k", "ext4_1k"]
    steps:
        # ensure you start clean
      - name: Clean up github workspace
        run: |
          cd $GITHUB_WORKSPACE
          rm -rf *
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          repository: riteshharjani/github-actions
          ref: master
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: kernel_artifacts
      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y \
          gcc \
          python3 python3-pip \
          qemu-system-x86 \
          qemu-utils cloud-image-utils gzip
      - name: Set up Python 3.x
        uses: actions/setup-python@v3
        with:
          python-version: '3.x'
      - name: Install pip packages
        run: |
          sudo pip3 install pexpect
          sudo pip3 install gdown
      - name: Cloud-init image
        run: |
          sudo cloud-localds user-data.img user-data.yaml
      - name: Create dummy qcow image
        run: |
          qemu-img create -f qcow2 jammy-server-cloudimg-amd64.img 20G
      # Download from self hosted
#      - name: Download Ubuntu cloud image
#        run: |
#          sudo gdown https://drive.google.com/uc?id=1KtYJxM_Z5sio1mIPEe-szS3IGu56VyML
#          gzip -d jammy-server-cloudimg-amd64.img.gz
#          sudo qemu-img resize jammy-server-cloudimg-amd64.img +20G
      - name: Cleanup results directory
        continue-on-error: true
        run: |
          rm -rf /tmp/results/
          mkdir /tmp/results
      - name: Run ${{ github.job }} tests with config ${{ matrix.config }}
        run: |
          echo "Running ${{ github.job }} tests with config ${{ matrix.config }}"
          echo $GITHUB_WORKSPACE
          lscpu
          lsmem
          pwd
          ls
          mount
          df -h
          cat tests/run_qemu_xfstests.py
          sudo python3 tests/run_qemu_xfstests.py "fs/xfstests.py.data/${{ matrix.config }}.yaml"
          sudo chown -R $USER:$USER /tmp/results
          sudo ls -al /tmp/results/
      - name: Upload test results for "${{ github.job }}-${{ matrix.config }}"
        uses: actions/upload-artifact@v3
        with:
          name: xfstests_artifacts_${{ github.job }}_${{ matrix.config }}
          path: /tmp/results/
      - name: Publish results for "${{ github.job }}-${{ matrix.config }}"
        continue-on-error: true
        uses: mikepenz/action-junit-report@v3
        if: always()
        with:
          commit: ${{ github.sha }}
          detailed_summary: true
          annotate_notice: true
          include_passed: true
          report_paths: '/tmp/results/job*/results*/*.xml'
          github_token: ${{ secrets.GITHUB_TOKEN }}
      # ensure you cleanup everything after every run but only from within
      # $GITHUB_WORKSPACE ;)
      - name: Clean up current directory
        run: |
          cd $GITHUB_WORKSPACE
          rm -rf *

  xfs_tests:
    needs: build_kernel
    if: ${{ needs.check_changes.outputs.in_xfs == 'true' || needs.check_changes.outputs.fs_generic == 'true' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        config: [1, 2, 3, 4]
    steps:
      - name: Run xfs tests with config ${{ matrix.config }}
        run: echo "Running xfs tests with config ${{ matrix.config }}"
      - name: Publish results for "${{ github.job }}-{{ matrix.config }}"
        continue-on-error: true
        uses: mikepenz/action-junit-report@v3
        if: always()
        with:
          commit: ${{ github.sha }}
          detailed_summary: true
          annotate_notice: true
          include_passed: true
          report_paths: 'results/job*/results*/*.xml'
          github_token: ${{ secrets.GITHUB_TOKEN }}

  btrfs_tests:
    needs: build_kernel
    if: ${{ needs.check_changes.outputs.in_btrfs == 'true' || needs.check_changes.outputs.fs_generic == 'true' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        config: [1, 2, 3, 4]
    steps:
      - name: Run btrfs tests with config ${{ matrix.config }}
        run: echo "Running btrfs tests with config ${{ matrix.config }}"
      - name: Publish results for "${{ github.job }}-{{ matrix.config }}"
        continue-on-error: true
        uses: mikepenz/action-junit-report@v3
        if: always()
        with:
          commit: ${{ github.sha }}
          detailed_summary: true
          annotate_notice: true
          include_passed: true
          report_paths: 'results/job*/results*/*.xml'
          github_token: ${{ secrets.GITHUB_TOKEN }}

